CREATE TABLE users (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  username VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(255) NOT NULL,
  role ENUM('Directora','Administrador','Taquilla') NOT NULL
);

CREATE TABLE visits (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  contact VARCHAR(100) NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  datetime_begin DATETIME NULL,
  datetime_end DATETIME NULL,
  duration_minutes INT NULL,
  school VARCHAR(150) NULL,
  township VARCHAR(100) NOT NULL
);

CREATE TABLE visitors (
  id INT NOT NULL AUTO_INCREMENT,
  gender ENUM('Masculino','Femenino','Otro') NOT NULL,
  price_id INT NOT NULL,
  visit_id INT NOT NULL,
  PRIMARY KEY (id),
  INDEX idx_visitors_price  (price_id),
  INDEX idx_visitors_visit  (visit_id),
  CONSTRAINT fk_visitors_price
    FOREIGN KEY (price_id)
    REFERENCES prices(id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT fk_visitors_visit
    FOREIGN KEY (visit_id)
    REFERENCES visits(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE tickets (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  visit_id INT NOT NULL,
  qr VARCHAR(255) NULL,
  status ENUM('Activo','Inactivo','Sin iniciar') NOT NULL DEFAULT 'Sin iniciar',
  INDEX fk_ticket_visit_idx (visit_id),
  FOREIGN KEY (visit_id)
    REFERENCES visits(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE payments (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  reference VARCHAR(100) NULL,
  payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  total FLOAT NOT NULL DEFAULT 0,
  cash FLOAT NOT NULL DEFAULT 0.0,
  card FLOAT NOT NULL DEFAULT 0.0,
  payment_check FLOAT NOT NULL DEFAULT 0.0
);

ALTER TABLE tickets
  ADD COLUMN payment_id INT NOT NULL,
  ADD CONSTRAINT uq_visits_payment UNIQUE (payment_id),
  ALTER TABLE tickets ADD CONSTRAINT fk_visits_payments
    FOREIGN KEY (payment_id)
    REFERENCES payments(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

CREATE TABLE prices (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  ALTER TABLE prices MODIFY COLUMN type ENUM('Niño','Adulto','Adulto mayor','Discapacitado','Estudiante') NOT NULL,
  price FLOAT NOT NULL
);

CREATE TABLE settings (
  id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
  capacity INT NOT NULL,
  companion_discount FLOAT NOT NULL,
  student_discount FLOAT NOT NULL
);

CREATE TABLE refresh_tokens (
  id INT NOT NULL AUTO_INCREMENT,
  token VARCHAR(255) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  expires_at DATETIME NOT NULL,
  user_id INT NOT NULL,
  PRIMARY KEY (id),
  INDEX idx_tokens_users (user_id),
  CONSTRAINT fk_tokens_users
    FOREIGN KEY (user_id)
    REFERENCES users(id)
    ON DELETE RESTRICT
    ON UPDATE CASCADE
);

CREATE EVENT IF NOT EXISTS ev_expire_visits
  ON SCHEDULE EVERY 1 HOUR
  COMMENT 'Marca Inactivo y calcula duración 4h después de creación si aún no se cerró'
  DO
    UPDATE tickets t
  JOIN visits v ON v.id = t.visit_id
  SET
    t.status           = 'Inactivo',
    v.datetime_end     = NOW(),
    v.duration_minutes = TIMESTAMPDIFF(MINUTE, v.datetime_begin, NOW())
  WHERE
    t.status = 'Activo'
    AND v.datetime_begin <= NOW() - INTERVAL 4 HOUR

DROP TRIGGER IF EXISTS trg_delete_payment_before_visit;
DELIMITER //
CREATE TRIGGER trg_delete_payment_before_visit
BEFORE DELETE ON visits
FOR EACH ROW
BEGIN
  DECLARE pid INT;
  SELECT payment_id
    INTO pid
    FROM tickets
   WHERE visit_id = OLD.id
   LIMIT 1;

  IF pid IS NOT NULL THEN
    DELETE FROM payments
     WHERE id = pid;
  END IF;
END;
//
DELIMITER ;

